#!/bin/bash
# /etc/init.d/omh-capstone
# version 1.3 2018-05-02 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   omh-capstone
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Server autorun script
# Description:    Allows control of a server
### END INIT INFO

## Settings
SCREEN="omh-capstone"
USERNAME="hkbennett2"
SERVICE="omh-capstone"
OMH_PATH='/home/$USERNAME/omh/'
SLEEP_DUR=2
## End of settings

TEXT_RESET="\e[0m"
TEXT_BOLD="\e[1m"
TEXT_RED="\e[31m"
TEXT_GREEN="\e[32m"
TEXT_YELLOW="\e[33m"

as_user() {
	if [ "`whoami`" == "$USERNAME" ] ;
	then
		bash -c "$1"
	else
		su - $USERNAME -c "$1"
	fi
	}

server_install() {
	printf "\nInstalling required mHealth programs ... "
	as_user "mkdir $OMH_PATH/run/ && cd $OMH_PATH/run/"
	# Updating repositories
	printf "\nUpdating system and installing dependencies ... "
	as_user "sudo apt update && sudo apt upgrade -y"
	as_user "sudo apt install bash-completion build-essentials curl git libssl-dev nodejs nodejs-legacy openjdk-8-jdk openjdk-8-jre screen wget zip"

	# Installing Docker
	printf "\nInstalling Docker ... "
	as_user "sudo apt-get remove docker docker-engine docker.io"
	as_user "sudo apt-get install apt-transport-https ca-certificates curl software-properties-common"
	as_user "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
	as_user "sudo add-apt-repository deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	as_user "sudo apt-get update"
	as_user "sudo apt-get install docker-ce"

	# Installing docker-compose
	printf "\nInstalling docker-compose ... "
	as_user "sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose"
	as_user "sudo chmod +x /usr/local/bin/docker-compose"
	printf "Done"

	# Install Docker Machine
	printf "\nSetting up docker-machine ... "
	as_user "docker-machine create --driver virtualbox default"
	as_user "eval $(docker-machine env default)"
	printf "Done"

	# Install OMH Storage Endpoint API
	printf "\nInstalling OMH Storage Endpoint API ..."
	as_user "git clone https://github.com/openmhealth/omh-dsu-ri.git"

	}

server_status() {
	ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	return $?
	}

server_start() {
	printf "\nStarting $SERVICE ... "
	if server_status
		then
		printf "ERROR\n - Failed to start $SERVICE as it was already running!\n"
	else
		## Begin start commands
		as_user "cd $OMH_PATH/run/"

		# Create service screen
		as_user "screen -dmS $SCREEN"

		# Start Docker Machine
		printf "\nStarting docker-machine ... "
		as_user "docker-machine start default"
		# Attach the virtual machine's shell to the screen's
		as_user "screen -S $SCREEN -X stuff 'eval $(docker-machine env default)^M'"

		# Start OMH Storage Endpoint
		printf "\nStarting OMH Storage Endpoint ... "
		as_user "screen -S $SCREEN -X stuff 'cd $OMH_PATH/run/omh-dsu-ri/^M'"
		as_user "screen -S $SCREEN -X stuff 'docker-compose -f docker-compose-init-postgres.yml up -d^M'"
		as_user "screen -S $SCREEN -X stuff 'cd $OMH_PATH/run/^M'"

		## End start commands
		as_user "cd $OMH_PATH/run/ && screen -h $HISTORY -dmS $SCREEN"
		sleep $SLEEP_DUR
		if server_status
			then
			printf "Done\n - Use \'screen -x $SCREEN\' to view it.\n"
		else
			printf "ERROR\n - Failed to start $SERVICE!\n"
		fi
	fi
	}

server_stop() {
	printf "\nStopping $SERVICE NOW ... "
	if server_status
	then
		## Begin stop commands
		as_user "docker-machine stop default"
		## End stop commands
		sleep $SLEEP_DUR
	else
		printf "ERROR\n$SERVICE is not running!"
	fi
	printf "\nChecking status of $SERVICE ... "
	if server_status
	then
		printf "Running\n"
	else
		printf "Stopped\n"
	fi
	}

server_update() {
	as_user "mkdir $OMH_PATH/update/ && cd $OMH_PATH/update/"
	printf "\nFetching updates ... "
	as_user "sudo apt update"
	as_user "sudo apt upgrade"
	printf "Done"

	# Update Docker
	printf "\n\nAttempting to update Docker ... "
	as_user "sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common"
	as_user "curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -"
	as_user "sudo add-apt-repository deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
	as_user "sudo apt update"
	as_user "sudo apt install docker-ce"

	# Update Docker Compose
	printf "\nAttempting to update Docker Compose ... "
	as_user "sudo curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"
	as_user "sudo chmod +x /usr/local/bin/docker-compose"
	printf "Done"

	# Update OMH Storage Endpoint
	printf "\n\nAttempting to update OMH Storage Endpoint ... "
	as_user "git clone https://github.com/openmhealth/omh-dsu-ri.git"

#  printf "Checking for updates ... $SERVICE ... \n"
#  printf "Get $UPDATE_REPO\n"
#  as_user "cd $UPDATE_PATH && wget -q -O $UPDATE_PATH/$SERVICE.update $UPDATE_REPO"
#  printf "Reading package... "
#  if [ -f $UPDATE_PATH/$SERVICE.update ]
#  then
#    printf "Done\n"
#    if `diff $STORAGE_PATH/$SERVICE $UPDATE_PATH/$SERVICE.update > /dev/null`
#    then
#      printf " - You already have the latest version of $SERVICE installed\n"
#    else
#    	printf " - A new version of $SERVICE has been downloaded. Run upgrade to install it\n"
#    fi
#  else
#    printf "ERROR\n - Could not fetch update package at requested URL\n"
#  fi
  }

server_backup() {
	printf "\nRunning server backup ... "
	if [ -f $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`.tar.gz ]
	then
		for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
		do
			if [ -f $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`-$i.tar.gz ]
			then
				continue
			else
				as_user "cd $OMH_PATH/run/ && tar zcf $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`-$i.tar.gz $OMH_PATH/run/"
				break
			fi
		done
	else
		as_user "cd $OMH_PATH/run/ && tar zcf $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`.tar.gz $OMH_PATH/run/"
	fi
	printf "Done"
	sleep $SLEEP_DUR
	}

server_command() {
	command="$1";
	if pgrep -u $USERNAME -f $SERVICE > /dev/null
	then
		pre_log_len=`wc -l "$RUN_PATH/commands.log" | awk '{print $1}'`
		printf "$SERVICE is running... executing command\n"
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"$command\"\015'"
		# Assumes that the command will run
		sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
		# print output
		tail -n $[`wc -l "$RUN_PATH/commands.log" | awk '{print $1}'`-$pre_log_len] "$RUN_PATH/commands.log"
	fi
	}

case "$1" in
	install)
		server_update
		server_install
		;;
	start)
		server_start
		;;
	stop)
		server_stop
		;;
	restart)
		server_stop
		server_start
		;;
	update)
		server_update
		;;
	backup)
		server_backup
		;;
	status)
		if server_status
		then
			echo "$SERVICE is running."
		else
			echo "$SERVICE is not running."
		fi
		;;
	command)
		if [ $# -gt 1 ]; then
			shift
			server_command "$*"
		else
			echo "Must specify server command (try 'help'?)"
		fi
		;;
	*)
		echo "Usage omh-capstone {backup|install|restart|start|status|stop|update}"
		#echo "Usage: /etc/init.d/mHealth-control {backup|install|restart|start|status|stop|update}"
		exit 1
		;;

esac

exit 0
