#!/bin/bash
# /etc/init.d/omh-capstone
# version 1.0 2018-04-05 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   omh-capstone
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Server autorun script
# Description:    Allows control of a server
### END INIT INFO

## Settings
SCREEN="mHealth"
USERNAME="hkbennett2"
SERVICE="mHealth"
OMH_PATH='/home/$USERNAME/omh/'
SLEEP_DUR=2
## End of settings

TEXT_RESET="\e[0m"
TEXT_BOLD="\e[1m"
TEXT_RED="\e[31m"
TEXT_GREEN="\e[32m"
TEXT_YELLOW="\e[33m"

as_user()
  {
  if [ "`whoami`" == "$USERNAME" ] ;
  then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
  }

server_install()
  {
  printf "Installing required mHealth programs ... "

  # Updating repositories
  as_user "sudo apt update && sudo apt upgrade -y"
  as_user "sudo apt install bash-completion build-essentials curl git libssl-dev mongodb nodejs nodejs-legacy openjdk-8-jdk openjdk-8-jre postgresql-client postgresql-server screen wget zip"

  # Install Docker Machine
  as_user "docker-machine create --driver virtualbox default"
  as_user "eval $(docker-machine env default)"

  as_user "docker run busybox"


  }

server_status()
  {
  ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  return $?
  }

server_start()
  {
  printf "Starting $SERVICE ... "
  if server_status
  then
    printf "ERROR\n - Failed to start $SERVICE as it was already running!\n"
  else
    ## Begin start commands
    as_user "cd $OMH_PATH/run/"

    # Start Docker Machine
    as_user "docker-machine start default"
    as_user "eval $(docker-machine env)"

    as_user "sudo systemctl start mongodb"
    as_user "screen -dmS postgres su - postgres && psql"

    # Start OMH Storage Endpoint
    printf "\n\nStarting OMH Storage Endpoint ... "
    as_user "cd $OMH_PATH/run/omh-dsu-ri/ && docker-compose -f docker-compose-init-postgres.yml up -d && cd $OMH_PATH/run/"

    # Start Postman
    as_user "screen -dmS postman postman"



    ## End start commands
    as_user "cd $OMH_PATH/run/ && screen -h $HISTORY -dmS $SCREEN"
    sleep $SLEEP_DUR
    if server_status
    then
      printf "Done\n - Use \'screen -x $SCREEN\' to view it.\n"
    else
      printf "ERROR\n - Failed to start $SERVICE!\n"
    fi
  fi
  }

server_stop()
  {
  printf "\nStopping $SERVICE NOW ... "
  if server_status
  then
    ## Begin stop commands
    as_user "docker-machine stop default"
    ## End stop commands
    sleep $SLEEP_DUR
  else
    printf "ERROR\n$SERVICE is not running!"
  fi
  printf "\nChecking status of $SERVICE ... "
  if server_status
  then
    printf "Running\n"
  else
    printf "Stopped\n"
  fi
  }

server_update()
  {
  as_user "mkdir $OMH_PATH/update/ && cd $OMH_PATH/update/"
  printf "\nFetching updates ... "
  as_user "sudo apt update"
  as_user "sudo apt upgrade"
  as_user "sudo apt install bash-completion curl git htop mysql-client mysql-server nodejs openjdk-8-jdk openjdk-8-jre postgresql-client postgresql-server screen wget zip"
  printf "Done"
  sleep $SLEEP_DUR

  # Update Docker
  printf "\n\nAttempting to update Docker ... "
  as_user "sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common"
  as_user "curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -"
  sudo add-apt-repository \ "deb [arch=amd64] https://download.docker.com/linux/debian \ $(lsb_release -cs) \ stable"
  as_user "sudo apt update"
  as_user "sudo apt install docker-ce"
  printf "\nVerifying Installation ... "
  as_user "sudo docker run hello-world"
  sleep $SLEEP_DUR

  # Update Docker Compose
  printf "\n\nAttempting to update Docker Compose ... "
  as_user "sudo curl -L https://github.com/docker/compose/releases/download/1.20.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"
  as_user "sudo chmod +x /usr/local/bin/docker-compose"
  printf "\nDocker Compose Version: "
  as_user "docker-compose --version"
  sleep $SLEEP_DUR

  # Update Docker Machine
  printf "\n\nAttempting to update Docker Machine ... "
  as_user "base=https://github.com/docker/machine/releases/download/v0.14.0 && curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && sudo install /tmp/docker-machine /usr/local/bin/docker-machine"
  printf "Done"
  printf "\nDocker Machine version: "
  as_user "docker-machine version"
  sleep $SLEEP_DUR

  # Update Postman
  printf "\n\nAttempting to update Postman ... "
  as_user "wget https://gist.github.com/SanderTheDragon/1331397932abaa1d6fbbf63baed5f043/archive/d4627a5d8bac97df8feda1d01f421ace8b94f1ce.zip"
  as_user "unzip d4627a5d8bac97df8feda1d01f421ace8b94f1ce.zip"
  as_user "rm d4627a5d8bac97df8feda1d01f421ace8b94f1ce.zip"

  sleep $SLEEP_DUR

  # Update OMH Storage Endpoint
  printf "\n\nAttempting to update OMH Storage Endpoint ... "
  as_user "git clone https://github.com/openmhealth/omh-dsu-ri.git"

#  printf "Checking for updates ... $SERVICE ... \n"
#  printf "Get $UPDATE_REPO\n"
#  as_user "cd $UPDATE_PATH && wget -q -O $UPDATE_PATH/$SERVICE.update $UPDATE_REPO"
#  printf "Reading package... "
#  if [ -f $UPDATE_PATH/$SERVICE.update ]
#  then
#    printf "Done\n"
#    if `diff $STORAGE_PATH/$SERVICE $UPDATE_PATH/$SERVICE.update > /dev/null`
#    then
#      printf " - You already have the latest version of $SERVICE installed\n"
#    else
#    	printf " - A new version of $SERVICE has been downloaded. Run upgrade to install it\n"
#    fi
#  else
#    printf "ERROR\n - Could not fetch update package at requested URL\n"
#  fi
  }

server_backup()
  {
  printf "\nRunning server backup ... "
  if [ -f $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`.tar.gz ]
  then
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
    do
      if [ -f $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`-$i.tar.gz ]
      then
        continue
      else
        as_user "cd $OMH_PATH/run/ && tar zcf $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`-$i.tar.gz $OMH_PATH/run/"
        break
      fi
    done
  else
    as_user "cd $OMH_PATH/run/ && tar zcf $OMH_PATH/backup/backup_`date "+%Y.%m.%d"`.tar.gz $OMH_PATH/run/"
  fi
  printf "Done"
  sleep $SLEEP_DUR
  }

server_command()
  {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    pre_log_len=`wc -l "$RUN_PATH/commands.log" | awk '{print $1}'`
    printf "$SERVICE is running... executing command\n"
    as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"$command\"\015'"
    # Assumes that the command will run
    sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[`wc -l "$RUN_PATH/commands.log" | awk '{print $1}'`-$pre_log_len] "$RUN_PATH/commands.log"
  fi
  }

case "$1" in
  install)
    server_update
    server_install
    ;;
  start)
    server_start
    ;;
  stop)
    server_stop
    ;;
  restart)
    server_stop
    server_start
    ;;
  update)
    server_update
    ;;
  backup)
    server_backup
    ;;
  status)
    if server_status
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ]; then
      shift
      server_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;
  *)
    echo "Usage omh-capstone {backup|install|restart|start|status|stop|update}"
    #echo "Usage: /etc/init.d/mHealth-control {backup|install|restart|start|status|stop|update}"
    exit 1
    ;;
esac

exit 0

